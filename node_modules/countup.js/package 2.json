{
  "name": "countup.js",
  "description": "Animates a numerical value by counting to it",
  "version": "2.0.4",
  "license": "MIT",
  "main": "./dist/countUp.min.js",
  "author": {
    "name": "@inorganik"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/inorganik/countUp.js.git"
  },
  "scripts": {
    "build": "npm run clean && tsc && gulp",
    "clean": "gulp clean",
    "lint": "tslint --project tsconfig.json",
    "test": "jest",
    "test:watch": "jest --watch",
    "serve": "http-server ./"
  },
  "dependencies": {},
  "devDependencies": {
    "@types/jest": "^24.0.6",
    "browserify": "^16.2.3",
    "del": "^3.0.0",
    "gulp": "^4.0.0",
    "gulp-concat": "^2.6.1",
    "gulp-uglify": "^3.0.2",
    "http-server": "^0.11.1",
    "jest": "^24.1.0",
    "ts-jest": "^24.0.0",
    "tslint": "^5.12.1",
    "typescript": "^3.3.3",
    "uglify-es": "^3.3.9"
  },
  "types": "./dist/countUp.d.ts",
  "readme": "# CountUp.js\nCountUp.js is a dependency-free, lightweight Javascript class that can be used to quickly create animations that display numerical data in a more interesting way.\n\nDespite its name, CountUp can count in either direction, depending on the start and end values that you pass.\n\nCountUp.js supports all browsers. MIT license.\n\n## [Try the demo](http://inorganik.github.io/countUp.js)\n\n---\n\n## New in 2.0\n\n- Completely rewritten in **Typescript**! The distributed code is still Javascript.\n- **New** cleaner [method signature](#example).\n- Tests with **Jest**. As much code coverage as possible mocking requestAnimationFrame.\n- **Smart easing**: CountUp intelligently defers easing until it gets close enough to the end value for easing to be visually noticeable. Configureable in the [options](#options).\n- **Separate bundles** for with and without the requestAnimationFrame polyfill. Choose `countUp.min.js` for modern browsers or `countUp.withPolyfill.min.js` for IE9 and older, and Opera mini.\n\nCountUp is now distributed as a ES6 module - [see below](#including) for how to include it in your project.\n\n## See Also\n\n- **[CountUp.js Angular ^2 Module](https://github.com/inorganik/countUp.js-angular2)**\n- **[CountUp.js Angular 1.x Module](https://github.com/inorganik/countUp.js-angular1)**\n- **[CountUp.js React](https://github.com/glennreyes/react-countup)**\n- **[CountUp.js Vue component wrapper](https://github.com/xlsdg/vue-countup-v2)**\n- **[CountUp.js WordPress Plugin](https://wordpress.org/plugins/countup-js/)**\n- **[CountUp.js jQuery Plugin](https://gist.github.com/inorganik/b63dbe5b3810ff2c0175aee4670a4732)**\n\n---\n\n## Usage:\n\n**On npm**: `countup.js`\n\n**Params**:\n- `target: string | HTMLElement | HTMLInputElement` - id of html element, input, svg text element, or DOM element reference where counting occurs\n- `endVal: number` - the value you want to arrive at\n- `options?: CountUpOptions` - optional configuration object for fine-grain control\n\n**Options** (defaults in parentheses): <a name=\"options\"></a>\n\n```ts\ninterface CountUpOptions {\n  startVal?: number; // number to start at (0)\n  decimalPlaces?: number; // number of decimal places (0)\n  duration?: number; // animation duration in seconds (2)\n  useGrouping?: boolean; // example: 1,000 vs 1000 (true)\n  useEasing?: boolean; // ease animation (true)\n  smartEasingThreshold?: number; // smooth easing for large numbers above this if useEasing (999)\n  smartEasingAmount?: number; // amount to be eased for numbers above threshold (333)\n  separator?: string; // grouping separator (',')\n  decimal?: string; // decimal ('.')\n  // easingFn: easing function for animation (easeOutExpo)\n  easingFn?: (t: number, b: number, c: number, d: number) => number;\n  formattingFn?: (n: number) => string; // this function formats result\n  prefix?: string; // text prepended to result\n  suffix?: string; // text appended to result\n  numerals?: string[]; // numeral glyph substitution\n}\n```\n\n**Example usage**: <a name=\"example\"></a>\n\n```js\nconst countUp = new CountUp('targetId', 5234);\nif (!countUp.error) {\n  countUp.start();\n} else {\n  console.error(countUp.error);\n}\n```\n\nPass options:\n```js\nconst countUp = new CountUp('targetId', 5234, options);\n```\n\nwith optional callback:\n\n```js\ncountUp.start(someMethodToCallOnComplete);\n\n// or an anonymous function\ncountUp.start(() => console.log('Complete!'));\n```\n\n**Other methods**:\n\nToggle pause/resume:\n\n```js\ncountUp.pauseResume();\n```\n\nReset the animation:\n\n```js\ncountUp.reset();\n```\n\nUpdate the end value and animate:\n\n```js\ncountUp.update(989);\n```\n---\n\n## Including CountUp <a name=\"including\"></a>\n\nCountUp v2 is distributed as an ES6 module because it is the most standardized and most widely compatible module for browsers. For compatibility with IE and older versions of Firefox (< 60), if you are not using a build tool, you will need a [module loader polyfill](https://github.com/ModuleLoader/browser-es-module-loader). You can read more about ES6 modules, using the module polyfill and more [here](https://www.sitepoint.com/using-es-modules/). If you are interested in a different module wrapping, you could install a previous release because I've experimented with many of them. The CountUp code is the same; the module wrappings were changed.\n\n- UMD - `npm i countup.js@2.0.0`.\n- AMD - `npm i countup.js@2.0.1`.\n- commonjs - `npm i countup@2.0.3`.\n\nFor the examples below, first install CountUp. This will give you the latest:\n```\nnpm i countup.js\n```\n\n### Example with vanilla js\nThis is what I used in the demo. Checkout index.html and demo.js.\n\nmain.js:\n```js\nimport { CountUp } from './js/CountUp.min.js';\n\nwindow.onload = function() {\n  var countUp = new CountUp('target', 2000);\n  countUp.start();\n}\n```\n\nInclude in your html. Notice the `type` attribute:\n```\n<script src=\"./js/countUp.min.js\" type=\"module\"></script>\n<script src=\"./main.js\" type=\"module\"></script>\n```\nðŸŽ‰ Done! Keep in mind to run locally you'll need a simple local server setup like [this](https://www.npmjs.com/package/http-server) (test the demo locally by running `npm run serve`) because otherwise you may see a CORS error when your browser tries to load the script as a module.\n\n### Example with Webpack\n\nmain.js:\n```js\nimport { CountUp } from 'countup.js';\n\nwindow.onload = function () {\n  var countUp = new CountUp('countup', 2000);\n  countUp.start();\n}\n```\nðŸŽ‰ Done!\n\n_If you have included CountUp in another type of project and want to help the community, please add it to the README and make a PR._\n\n---\n\n## Contributing <a name=\"contributing\"></a>\n\nBefore you make a pull request, please be sure to follow these instructions:\n\n1. Do your work on `src/countUp.ts`\n1. Run tests: `npm t`\n1. Run `npm run build`, which copies and minifies the .js files to the `dist` folder.\n1. Serve the demo by running `npm run serve` and visit http://localhost:8080 to make sure it counts.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/inorganik/countUp.js/issues"
  },
  "homepage": "https://github.com/inorganik/countUp.js#readme",
  "_id": "countup.js@2.0.4",
  "_from": "countup.js@>=2.0.2 <2.1.0"
}
