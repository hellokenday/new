{
  "name": "rollup-plugin-node-resolve",
  "description": "Bundle third-party dependencies in node_modules",
  "version": "5.2.0",
  "devDependencies": {
    "@babel/core": "^7.4.5",
    "@babel/preset-env": "^7.4.5",
    "@babel/register": "^7.4.4",
    "es5-ext": "^0.10.50",
    "eslint": "^5.16.0",
    "mocha": "^6.1.4",
    "rollup": "^1.16.1",
    "rollup-plugin-babel": "^4.3.2",
    "rollup-plugin-commonjs": "^10.0.0",
    "rollup-plugin-json": "^4.0.0",
    "string-capitalize": "^1.0.1",
    "typescript": "^3.5.2"
  },
  "main": "dist/rollup-plugin-node-resolve.cjs.js",
  "module": "dist/rollup-plugin-node-resolve.es.js",
  "jsnext:main": "dist/rollup-plugin-node-resolve.es.js",
  "scripts": {
    "build": "rollup -c",
    "pretest": "npm run build",
    "test": "mocha",
    "posttest": "tsc && eslint src test/*.js",
    "lint": "eslint src",
    "prepublishOnly": "npm test",
    "prepare": "npm run build"
  },
  "files": [
    "src",
    "dist",
    "index.d.ts"
  ],
  "dependencies": {
    "@types/resolve": "0.0.8",
    "builtin-modules": "^3.1.0",
    "is-module": "^1.0.0",
    "resolve": "^1.11.1",
    "rollup-pluginutils": "^2.8.1"
  },
  "peerDependencies": {
    "rollup": ">=1.11.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rollup/rollup-plugin-node-resolve.git"
  },
  "keywords": [
    "rollup",
    "rollup-plugin",
    "es2015",
    "npm",
    "modules"
  ],
  "author": {
    "name": "Rich Harris",
    "email": "richard.a.harris@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/rollup/rollup-plugin-node-resolve/issues"
  },
  "homepage": "https://github.com/rollup/rollup-plugin-node-resolve#readme",
  "readme": "# rollup-plugin-node-resolve\n\n*This plugin used to be called rollup-plugin-npm*\n\nLocate modules using the [Node resolution algorithm](https://nodejs.org/api/modules.html#modules_all_together), for using third party modules in `node_modules`\n\n## Installation\n\n```bash\nnpm install --save-dev rollup-plugin-node-resolve\n```\n\n## Usage\n\n```js\n// rollup.config.js\nimport resolve from 'rollup-plugin-node-resolve';\n\nexport default {\n  input: 'main.js',\n  output: {\n    file: 'bundle.js',\n    format: 'iife',\n    name: 'MyModule'\n  },\n  plugins: [\n    resolve({\n\n      // the fields to scan in a package.json to determine the entry point\n      // if this list contains \"browser\", overrides specified in \"pkg.browser\"\n      // will be used\n      mainFields: ['module', 'main'], // Default: ['module', 'main']\n\n      // DEPRECATED: use \"mainFields\" instead\n      // use \"module\" field for ES6 module if possible\n      module: true, // Default: true\n\n      // DEPRECATED: use \"mainFields\" instead\n      // use \"jsnext:main\" if possible\n      // legacy field pointing to ES6 module in third-party libraries,\n      // deprecated in favor of \"pkg.module\":\n      // - see: https://github.com/rollup/rollup/wiki/pkg.module\n      jsnext: true,  // Default: false\n\n      // DEPRECATED: use \"mainFields\" instead\n      // use \"main\" field or index.js, even if it's not an ES6 module\n      // (needs to be converted from CommonJS to ES6)\n      // â€“ see https://github.com/rollup/rollup-plugin-commonjs\n      main: true,  // Default: true\n\n      // some package.json files have a \"browser\" field which specifies\n      // alternative files to load for people bundling for the browser. If\n      // that's you, either use this option or add \"browser\" to the\n      // \"mainfields\" option, otherwise pkg.browser will be ignored\n      browser: true,  // Default: false\n\n      // not all files you want to resolve are .js files\n      extensions: [ '.mjs', '.js', '.jsx', '.json' ],  // Default: [ '.mjs', '.js', '.json', '.node' ]\n\n      // whether to prefer built-in modules (e.g. `fs`, `path`) or\n      // local ones with the same names\n      preferBuiltins: false,  // Default: true\n\n      // Lock the module search in this path (like a chroot). Module defined\n      // outside this path will be marked as external\n      jail: '/my/jail/path', // Default: '/'\n\n      // Set to an array of strings and/or regexps to lock the module search\n      // to modules that match at least one entry. Modules not matching any\n      // entry will be marked as external\n      only: [ 'some_module', /^@some_scope\\/.*$/ ], // Default: null\n\n      // If true, inspect resolved files to check that they are\n      // ES2015 modules\n      modulesOnly: true, // Default: false\n\n      // Force resolving for these modules to root's node_modules that helps\n      // to prevent bundling the same package multiple times if package is\n      // imported from dependencies.\n      dedupe: [ 'react', 'react-dom' ], // Default: []\n\n      // Any additional options that should be passed through\n      // to node-resolve\n      customResolveOptions: {\n        moduleDirectory: 'js_modules'\n      }\n    })\n  ]\n};\n```\n\n## Using with rollup-plugin-commonjs\n\nSince most packages in your node_modules folder are probably legacy CommonJS rather than JavaScript modules, you may need to use [rollup-plugin-commonjs](https://github.com/rollup/rollup-plugin-commonjs):\n\n```js\n// rollup.config.js\nimport resolve from 'rollup-plugin-node-resolve';\nimport commonjs from 'rollup-plugin-commonjs';\n\nexport default {\n  input: 'main.js',\n  output: {\n    file: 'bundle.js',\n    format: 'iife'\n  },\n  name: 'MyModule',\n  plugins: [\n    resolve(),\n    commonjs()\n  ]\n};\n```\n\n## Resolving Built-Ins (like `fs`)\n\nThis plugin won't resolve any builtins (e.g. `fs`). If you need to resolve builtins you can install local modules and set `preferBuiltins` to `false`, or install a plugin like [rollup-plugin-node-builtins](https://github.com/calvinmetcalf/rollup-plugin-node-builtins) which provides stubbed versions of these methods.\n\nIf you want to silence warnings about builtins, you can add the list of builtins to the `externals` option; like so:\n\n```js\nimport resolve from 'rollup-plugin-node-resolve';\nimport builtins from 'builtin-modules'\nexport default ({\n  input: ...,\n  plugins: [resolve()],\n  externals: builtins,\n  output: ...\n})\n```\n\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "rollup-plugin-node-resolve@5.2.0",
  "_from": "rollup-plugin-node-resolve@>=5.2.0 <5.3.0"
}
